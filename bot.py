import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")

import nest_asyncio
import asyncio

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_db():
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task_name TEXT NOT NULL,
            deadline TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

create_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddTask(StatesGroup):
    waiting_for_task_name = State()
    waiting_for_deadline = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, /list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã."
    )

# /add ‚Äî –∑–∞–ø—É—Å–∫ FSM
@dp.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTask.waiting_for_task_name)

# –®–∞–≥ 1 ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(AddTask.waiting_for_task_name)
async def get_task_name(message: types.Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")
    await state.set_state(AddTask.waiting_for_deadline)

# –®–∞–≥ 2 ‚Äî –¥–µ–¥–ª–∞–π–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message(AddTask.waiting_for_deadline)
async def get_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_name = user_data["task_name"]
    deadline = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (task_name, deadline) VALUES (?, ?)", (task_name, deadline))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ <b>{task_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º <b>{deadline}</b>.")
    await state.clear()

# /list
@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()
    cursor.execute("SELECT task_name, deadline FROM tasks")
    tasks = cursor.fetchall()
    conn.close()

    if tasks:
        tasks_list = "\n".join([f"üìå <b>{task[0]}</b> ‚Äî –¥–æ <i>{task[1]}</i>" for task in tasks])
        await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n{tasks_list}")
    else:
        await message.answer("üôå –ù–µ—Ç –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º event loop –≤ Spyder
if __name__ == "__main__":
    nest_asyncio.apply()  # –ü—Ä–∏–º–µ–Ω—è–µ–º patch –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å event loop
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

